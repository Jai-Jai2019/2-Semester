import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class GUICalculator extends JFrame {

    public static void main(String[] args) {

        GUICalculator calcu = new GUICalculator();
        //
        calcu.pack();
        //
        calcu.setLocationRelativeTo(null);
        //Resize is in False
        calcu.setResizable(true);
        //Close the Program
        calcu.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //Shows the Table
        calcu.setVisible(true);
    }
    
    //Line 1
    public JButton butt7, butt8, butt9, buttPlus, buttMax, buttMean;
    //Line 2
    public JButton butt4, butt5, butt6, buttMinus, buttMin, buttMode;
    //Line 3
    public JButton butt1, butt2, butt3, buttMultiply, buttParL, buttMedian;
    //Line 4
    public JButton buttClear, butt0, buttErase, buttDivide, buttParR, buttSortA;
    //Line 5
    public JButton buttEquals, buttAns, buttX2, buttXY, buttComma, buttSortD;
    //Line 6
    public JButton buttSquared, buttN, buttDot, buttX, buttFibo, buttClose;
    
    
    public JButton Equal, Add, Subtract,Multiply, Divide,Equals,Clear;
    private double TEMP, EqualsTEMP;
    
    private JTextField jtfResult;

    Boolean addBool,subBool, divBool, MultiplyBool, MaxBool = false;
    

    String display = "";

    public GUICalculator() {

        //Panel
        JPanel p1 = new JPanel();
        p1.setLayout(new GridLayout(6, 1));
        
        JPanel p2 = new JPanel();
        p2.setLayout(new FlowLayout());
        p2.add(jtfResult = new JTextField(20));
        jtfResult.setHorizontalAlignment(JTextField.RIGHT);
        jtfResult.setEditable(false);

        JPanel p3 = new JPanel();
        p3.setLayout(new GridLayout(6, 1));
        p3.add(Add = new JButton("+"));
        p3.add(Subtract = new JButton("-"));
        p3.add(Multiply = new JButton("*"));
        p3.add(Divide = new JButton("/"));
        p3.add(Equals = new JButton("="));

        JPanel p = new JPanel();
        p.setLayout(new GridLayout());
        p.add(p2, BorderLayout.NORTH);
        p.add(p1, BorderLayout.SOUTH);
        p.add(p3, BorderLayout.EAST);

        add(p);
            
        //Line 1
        p1.add(butt7 = new JButton("7"));
        p1.add(butt8 = new JButton("8"));
        p1.add(butt9 = new JButton("9"));
        p1.add(buttPlus = new JButton("+"));
        p1.add(buttMax = new JButton("ᴍᴀx"));
        p1.add(buttMean = new JButton("ᴍᴇᴀɴ"));
        
        //Line 2
        p1.add(butt7 = new JButton("4"));
        p1.add(butt8 = new JButton("5"));
        p1.add(butt9 = new JButton("6"));
        p1.add(buttMinus = new JButton("-"));
        p1.add(buttMin= new JButton("ᴍɪɴ"));
        p1.add(buttMode = new JButton("ᴍᴏᴅᴇ"));
        
        //Line 3
        p1.add(butt1 = new JButton("1"));
        p1.add(butt2 = new JButton("2"));
        p1.add(butt3 = new JButton("3"));
        p1.add(buttMultiply = new JButton("*"));
        p1.add(buttParL = new JButton("("));
        p1.add(buttMedian = new JButton("ᴍᴇᴅɪᴀɴ"));
        
        //Line 4
        p1.add(buttClear = new JButton("C"));
        p1.add(butt0 = new JButton("Ø"));
        p1.add(buttErase = new JButton("←"));
        p1.add(buttDivide = new JButton("/"));
        p1.add(buttParR = new JButton(")"));
        p1.add(buttSortA = new JButton("ꜱᴏʀᴛ ᴀ"));

        //Line 5
        p1.add(buttEquals = new JButton("="));
        p1.add(buttAns = new JButton("ᴀɴꜱ"));
        p1.add(buttX2 = new JButton("x²"));
        p1.add(buttXY = new JButton("9"));
        p1.add(buttComma = new JButton("xʸ"));
        p1.add(buttSortD = new JButton("ꜱᴏʀᴛ ᴅ"));
        
        //Line 6
        p1.add(buttSquared = new JButton("√"));
        p1.add(buttN = new JButton("ɴ!"));
        p1.add(buttDot = new JButton("."));
        p1.add(buttX = new JButton("|x|"));
        p1.add(buttFibo = new JButton("ꜰɪʙᴏ"));
        p1.add(buttClose = new JButton("ᴄʟᴏꜱᴇ"));
        
        
        //Line 1
        butt7.addActionListener(new Seven());
        butt8.addActionListener(new Eight());
        butt9.addActionListener(new Nine());
        buttPlus.addActionListener(new Plus());
        buttMax.addActionListener(new Max());
        buttMean.addActionListener(new Mean());
        
        //Line 2
        butt4.addActionListener(new Four());
        butt5.addActionListener(new Five());
        butt6.addActionListener(new Six());
        buttMinus.addActionListener(new Minus());
        buttMin.addActionListener(new Min());
        buttMode.addActionListener(new Mode());
        
        //Line 3
        butt1.addActionListener(new One());
        butt2.addActionListener(new Two());
        butt3.addActionListener(new Three());
        buttMultiply.addActionListener(new Multiply());
        buttParL.addActionListener(new ParL());
        buttMedian.addActionListener(new Median());
        
        //Line 4
        buttClear.addActionListener(new Clear());
        butt0.addActionListener(new Zero());
        buttErase.addActionListener(new Three());
        buttDivide.addActionListener(new Divide());
        buttParR.addActionListener(new ParR());
        buttSortA.addActionListener(new SortA());
        
        /*Line 5
        buttEquals.addActionListener(new Equals());
        buttAns.addActionListener(new Ans());
        buttX2.addActionListener(new X2());
        buttXY.addActionListener(new XY());
        buttComma.addActionListener(new Comma());
        buttSortD.addActionListener(new SortD());
        
        //Line 6
        buttSquared.addActionListener(new Squared());
        buttN.addActionListener(new N());
        buttDot.addActionListener(new Dot());
        buttX.addActionListener(new X());
        buttFibo.addActionListener(new Fibo());
        buttClose.addActionListener(new Close()); */
        
    } //JavaCaluclator()

    class ListenToClear implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            
            //display = jtfResult.getText();
            jtfResult.setText("");
            addBool = false;
            subBool = false;
            MultiplyBool = false;
            divBool = false;

            TEMP = 0;
            EqualsTEMP = 0;
        }
    }

    //Line 1
    class Seven implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "7");
        }
    }
    class Eight implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "8");
        }
    }
    class Nine implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "9");
        }
    }
    class Plus implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "+");
        }
    }
    class Max implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "");
        }
    }
    class Mean implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "");
        }
    }

    
    //Line 2
    class Four implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "4");
        }
    }
    class Five implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "5");
        }
    }
    class Six implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "6");
        }
    }
    class Minus implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "-");
        }
    }
    class ListenToAdd implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            addBool = true;
        }
    }
    class ListenToSubtract implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            subBool = true;
        }
    }
    class Min implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            //MinBool = true;
        }
    }
     class Mode implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            //ModeBool = true;
        }
    }
     
     
    //Line 3
    class One implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("1");
        }
    }
    class Two implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("2");
        }
    }
    class Three implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("3");
        }
    }
    class Multiply implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            MultiplyBool = true;
        }
    }
    class ParL implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("(");
        }
    }
    class Median implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("1");
            //MedianBool = true;
        }
    }
    
    //Line 4
    class Clear implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "");
            //Clear
        }
    }
    class Zero implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "0");
        }
    }
    class Erase implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText("");
            //Erase
        }
    }
    class Divide implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText("");
            //Divide
        }
    }
    class ParR implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText(display + ")");
        }
    }
    class SortA implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            //SortABool = true;
        }
    }
    
    
   /*Line 5
    class Equals implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "4");
            
        }
    }
    class Five implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "5");
        }
    }
    class Six implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "6");
        }
    }
    class Minus implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            display = jtfResult.getText();
            jtfResult.setText(display + "-");
        }
    }
    class ListenToAdd implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            addBool = true;
        }
    }
    class ListenToSubtract implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            subBool = true;
        }
    }
    class Min implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            //MinBool = true;
        }
    }
     class Mode implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            //ModeBool = true;
        }
    }
     class Mode implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            //ModeBool = true;
        }
    }
    
    
    
    
    */
    
    class ListenToDivide implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            TEMP = Double.parseDouble(jtfResult.getText());
            jtfResult.setText("");
            divBool = true;
        }
    }

    class ListenToEquals implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            EqualsTEMP = Double.parseDouble(jtfResult.getText());
            if (addBool == true)
                EqualsTEMP = EqualsTEMP + TEMP;
            else if ( subBool == true)
                EqualsTEMP = EqualsTEMP - TEMP;
            else if ( MultiplyBool == true)
                EqualsTEMP = EqualsTEMP * TEMP;
            else if ( divBool == true)
                EqualsTEMP = EqualsTEMP / TEMP;
            jtfResult.setText(  Double.toString(EqualsTEMP));

            addBool = false;
            subBool = false;
            MultiplyBool = false;
            divBool = false;
            MaxBool = false;
        }
    }

    

}
