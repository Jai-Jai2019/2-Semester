import java.util.Scanner;
    public class BST {

    public static void main(String[] args) {
        Binary1 bst = new Binary1();
        Scanner sc = new Scanner(System.in);
        int choice;
        int numb;
        System.out.println("Welcome to Binary Search Tree! ");
        
        try {
            do {
            System.out.println("\nWhat will you do? ");
            System.out.print("[1] Insert" + " \n[2] Delete"+ " \n[3] Go out!" + "\n: ");       
            choice = sc.nextInt();
        
                try {
                    switch (choice) {
                        case 1:
                            System.out.print("\nInsert number: ");
                            numb = sc.nextInt();
                            bst.root = bst.insert(bst.root, numb);
                        break;

                        case 2:              
                            if (bst.getHeight() == 0) {
                                System.out.println("\nThe tree is empty");
                        break;
                        } 
                    else {
                        System.out.print("\nDelete number: ");
                        numb = sc.nextInt();
                        bst.root = bst.deleteNode(bst.root, numb);
                        break;
                        }

                        case 3:{
                            System.out.print("\nPre:  \t");
                            bst.printPreorder();
                            System.out.print("\nIn:   \t");
                            bst.printInorder();
                            System.out.print("\nPost: \t");
                            bst.printPostorder();
                            System.exit(0);
                        }
                            System.out.println("");
                            default:
                        break;
                    }
                } 
                catch (NullPointerException e) {
                    System.out.println("\nNumber cannot be found!");    
                }
                bst.printBST();
                System.out.println();
                }            
            while (choice != 4);
        } 
        
        catch (IllegalArgumentException e) {
            System.out.println("\nSMART USER!.");
            System.exit(0);
            }
        }
    }
    
    class Node {
        int key, height;
        Node left, right;
        Node(int d) {
        key = d;
        height = 1;
        }
    }

    class Binary1 {
        Node root;

        int height(Node N) {
            if (N == null) {
                return 0;
            }
            return N.height;
        }
        int max(int a, int b) {
            return (a > b) ? a : b;
    }

    Node insert(Node node, int key) {
        if (node == null) {
            return (new Node(key));
        }
        
        if (key < node.key) {
            node.left = insert(node.left, key);
        } 
        
        else if (key > node.key) {
           node.right = insert(node.right, key);
        } 
        
        else {
            return node;
        }
                        
        node.height = 1 + max(height(node.left),
        height(node.right));
        return node;
    }
                

    Node minValueNode(Node node) {
        Node current = node;
                       
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }

    Node deleteNode(Node root, int key) {
        if (root == null) {
           return root;
        }
                        
        if (key < root.key) {
            root.left = deleteNode(root.left, key);
        } 
       
        else if (key > root.key) {
            root.right = deleteNode(root.right, key);
        } 

        else {
            if ((root.left == null) || (root.right == null)) {
            Node temp = null;
            
            if (temp == root.left) {
            temp = root.right;
            } 
            
            else {
                temp = root.left;
            }
                   
            if (temp == null) {
                temp = root;
                root = null;                   
            }
            
                else {
                root = temp; // Copy the contents of
                }            // the non-empty child
            } 
            
            else {
            // node with two children: Get the inorder
            // successor (smallest in the right subtree)
            Node temp = minValueNode(root.right);
            // Copy the inorder successor's data to this node
            root.key = temp.key;
            // Delete the inorder successor
            root.right = deleteNode(root.right, temp.key);
            }
        }
        // If you only have 1 node and then return
        if (root == null) {
        return root;
        }
        //STEP 2:update height's node
        root.height = max(height(root.left), height(root.right)) + 1;
        return root;
    }
    
    void printPostorder() { printPostorder(root); }
    void printPreorder()  { printPreorder(root);  }
    void printInorder()   { printInorder(root);   }

    void printPreorder(Node node) {
        if (node == null)
        return;

        /* first print data of node */
        System.out.print(node.key + ",\t");

        /* then recur on left sutree */
        printPreorder(node.left);

        /* now recur on right subtree */
        printPreorder(node.right);
    }
                
    void printInorder(Node root) {
        if (root != null) {
            printInorder(root.left);
            System.out.print(root.key + ",\t");
            printInorder(root.right);
        }
    }
    
    void printPostorder(Node node) {
        if (node == null)
        return;

        // first recur on left subtree
        printPostorder(node.left);

        // then recur on right subtree
        printPostorder(node.right);

        // now deal with the node
        System.out.print(node.key + ",\t");
    }
    
    public int getHeight() {
    return root.height;
    }
    
    public String x;
    public int[] bstArray;                              
    public int indArray[];                   
    public int lastKnownIndex = 30;

    public void printBST() {

        x = "";
        try {
            int avlSize = ((int) Math.pow(2, root.height)) - 1;

            if (avlSize > 0) {
            bstArray = new int[avlSize];

            int index = 0;
            bstArray[index] = root.key;

            if (avlSize > 1) {
                BSTSearch(root, index);
            }

        for (int b = 0; b < bstArray.length; b++) {
            if (b <= lastKnownIndex) {
                String bstValue = (bstArray[b] == 0) ? "*" : bstArray[b] + "";
                x = x + "\t" + bstValue;
            }
        }
        
        int[] a = new int [30];
            System.out.printf("\nIndex: ");
        
            for (int b = 0; b < bstArray.length; b++)
                System.out.print("\t" + b);
                System.out.print("\nValue: " + x);
            }
       } 
        
       catch (NullPointerException e) {
           System.out.println("*");
       }
    }

    public void showIndex() {
        int bstSize = 0;
        bstSize = ((int) Math.pow(2, root.height)) - 1;
        
        if (bstSize > 0) {
            indArray = new int[bstSize];
            for (int i = 0; i < bstSize; i++) {
                indArray[i] = i;
            }
            for (int i = 0; i < bstSize; i++) {
                System.out.print(" " + indArray[i] + " ");
            }
        }
    }

    public void BSTSearch(Node node, int i) {
        Node lt, rt;
        lt = node.left;
        rt = node.right;

        int nodeLeftIndex = (2 * i) + 1;
        int nodeRightIndex = (2 * i) + 2;
        if (lt != null) {
        bstArray[nodeLeftIndex] = lt.key;
        BSTSearch(lt, nodeLeftIndex);
        lastKnownIndex = Math.max(nodeLeftIndex, lastKnownIndex);
        } 
        
        else {
            if (nodeLeftIndex < bstArray.length - 1) {
                bstArray[nodeLeftIndex] = 0;
            }
       }
        
        if (rt != null) {
            bstArray[nodeRightIndex] = rt.key;
            BSTSearch(rt, nodeRightIndex);
            lastKnownIndex = Math.max(nodeRightIndex, lastKnownIndex);
        } 
       
        else {
            if (nodeRightIndex < bstArray.length - 1) {
            bstArray[nodeRightIndex] = 0;
            }
        }
    }
}
